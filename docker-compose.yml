# Stable Development Infrastructure - Fixed Ports & Persistent Setup
# This configuration ensures services stay up reliably with consistent ports

networks:
  dev-network:
    driver: bridge
    name: dev-infrastructure  # Fixed network name

volumes:
  postgres_data:
    driver: local
    name: dev_postgres_data  # Fixed volume names
  pgadmin_data:
    driver: local
    name: dev_pgadmin_data
  mongodb_data:
    driver: local
    name: dev_mongodb_data
  mongodb_config:
    driver: local
    name: dev_mongodb_config
  kafka_data:
    driver: local
    name: dev_kafka_data
  rabbitmq_data:
    driver: local
    name: dev_rabbitmq_data
  redis_data:
    driver: local
    name: dev_redis_data

services:
  # PostgreSQL Database - Ultra Stable
  postgres:
    image: postgres:15-alpine
    container_name: dev-postgres
    hostname: dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devdb
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"  # Fixed port mapping
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d devdb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PgAdmin for PostgreSQL Management - Stable Configuration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dev-pgladmin
    hostname: dev-pgladmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: cloudycat999@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"  # Fixed port as per your requirement
    volumes:
      - pgadmin_data:/var/lib/pgladmin
    networks:
      - dev-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M

  # MongoDB Database - Stable Configuration
  mongodb:
    image: mongo:7.0
    container_name: dev-mongodb
    hostname: dev-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: devdb
    ports:
      - "27017:27017"  # Fixed port mapping
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Mongo Express for MongoDB Management - Fixed Port
  mongo-express:
    image: mongo-express:latest
    container_name: dev-mongo-express
    hostname: dev-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@dev-mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
      ME_CONFIG_SITE_BASEURL: /
    ports:
      - "8081:8081"  # Fixed port as per your requirement
    networks:
      - dev-network
    depends_on:
      mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M

  # Redis Cache - Ultra Stable
  redis:
    image: redis:7-alpine
    container_name: dev-redis
    hostname: dev-redis
    restart: unless-stopped
    command: redis-server --requirepass devpass --appendonly yes --save 60 1
    ports:
      - "6379:6379"  # Fixed port mapping
    volumes:
      - redis_data:/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "devpass", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M

  # Redis Commander for Redis Management - Fixed Port
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dev-redis-commander
    hostname: dev-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: dev-redis:dev-redis:6379:0:devpass
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8082:8081"  # Fixed port as per your requirement
    networks:
      - dev-network
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M

  # Apache Kafka - Stable KRaft Configuration
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: dev-kafka
    hostname: dev-kafka
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@dev-kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG_RETENTION_HOURS: 168
      CLUSTER_ID: dev-kafka-cluster-001
    ports:
      - "9092:9092"  # Fixed port mapping
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Kafka UI for Management - Fixed Port
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: dev-kafka-ui
    hostname: dev-kafka-ui
    restart: unless-stopped
    environment:
      KAFKA_CLUSTERS_0_NAME: dev-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: dev-kafka:9092
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: true
    ports:
      - "9021:8080"  # Fixed port as per your requirement
    networks:
      - dev-network
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M

  # RabbitMQ Message Broker - Ultra Stable
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: dev-rabbitmq
    hostname: dev-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: devuser
      RABBITMQ_DEFAULT_PASS: devpass
      RABBITMQ_DEFAULT_VHOST: /dev
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{default,info}] disk_free_limit 2147483648"
    ports:
      - "5672:5672"    # AMQP port - Fixed
      - "15672:15672"  # Management UI - Fixed port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M

  # Gateway port - Fixed
      - "8091:8080" # Management port - Fixed
    volumes:
      - ./nginx-gateway:/etc/nginx/conf.d:ro
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M


  # Simple API Gateway Simulator (Node.js based - super stable)
  api-gateway-simulator:
    image: node:18-alpine
    container_name: dev-api-simulator
    hostname: dev-api-simulator
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      echo 'const express = require(\"express\");
      const app = express();
      app.use(express.json());
      
      // Health endpoint
      app.get(\"/health\", (req, res) => {
        res.json({ status: \"healthy\", timestamp: new Date().toISOString() });
      });
      
      // Status endpoint  
      app.get(\"/status\", (req, res) => {
        res.json({ 
          gateway: \"Development API Gateway\",
          version: \"1.0.0\",
          services: {
            postgres: \"localhost:5432\",
            mongodb: \"localhost:27017\", 
            redis: \"localhost:6379\",
            kafka: \"localhost:9092\",
            rabbitmq: \"localhost:5672\"
          }
        });
      });
      
      // Root endpoint
      app.get(\"/\", (req, res) => {
        res.json({
          message: \"Development Infrastructure API Gateway\",
          endpoints: [\"/health\", \"/status\", \"/api/*\"],
          management: \"http://localhost:8091\"
        });
      });
      
      // API routes
      app.all(\"/api/*\", (req, res) => {
        res.json({
          message: \"API Gateway Ready\",
          method: req.method,
          path: req.path,
          timestamp: new Date().toISOString()
        });
      });
      
      const port = 3000;
      app.listen(port, \"0.0.0.0\", () => {
        console.log(`API Gateway running on port ${port}`);
      });' > server.js &&
      npm init -y &&
      npm install express &&
      node server.js"
    ports:
      - "3000:3000"   # API Gateway Simulator port
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M

  # Lightweight Management Gateway (Python-based)
  management-gateway:
    image: python:3.11-alpine
    container_name: dev-management-gateway
    hostname: dev-management-gateway
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      echo 'from http.server import HTTPServer, BaseHTTPRequestHandler
      import json
      import urllib.request
      from datetime import datetime

      class GatewayHandler(BaseHTTPRequestHandler):
          def do_GET(self):
              if self.path == \"/health\":
                  self.send_json({\"status\": \"healthy\", \"timestamp\": datetime.now().isoformat()})
              elif self.path == \"/\":
                  self.send_json({
                      \"service\": \"Development Infrastructure Management Gateway\",
                      \"endpoints\": [\"/health\", \"/services\", \"/status\"],
                      \"port\": 8091
                  })
              elif self.path == \"/services\":
                  self.send_json({
                      \"services\": {
                          \"postgres\": \"http://localhost:5050\",
                          \"mongodb\": \"http://localhost:8081\", 
                          \"redis\": \"http://localhost:8082\",
                          \"kafka\": \"http://localhost:9021\",
                          \"rabbitmq\": \"http://localhost:15672\",
                          \"api_gateway\": \"http://localhost:3000\"
                      }
                  })
              else:
                  self.send_json({\"message\": \"Management Gateway\", \"available_endpoints\": [\"/health\", \"/services\"]})
          
          def send_json(self, data):
              self.send_response(200)
              self.send_header(\"Content-type\", \"application/json\")
              self.end_headers()
              self.wfile.write(json.dumps(data, indent=2).encode())
      
      httpd = HTTPServer((\"0.0.0.0\", 8091), GatewayHandler)
      print(\"Management Gateway running on port 8091\")
      httpd.serve_forever()' > gateway.py &&
      python gateway.py"
    ports:
      - "8091:8091"   # Management Gateway port
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M

  # Alternative: Kong API Gateway (Professional-grade, optional)
  kong-gateway:
    image: kong:latest
    container_name: dev-kong-gateway
    hostname: dev-kong-gateway
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8090:8000"   # Kong Gateway port
      - "8444:8443"   # Kong SSL Gateway port  
      - "8001:8001"   # Kong Admin API port
    volumes:
      - ./kong-config:/kong:ro
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M

  # Simple Development API Gateway - Single Solution
  dev-gateway:
    image: nginx:alpine
    container_name: dev-gateway
    hostname: dev-gateway
    restart: unless-stopped
    ports:
      - "8090:80"   # API Gateway port
      - "8091:8080" # Health/Status port
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    volumes:
      - ./gateway-config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./gateway-config/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M
